/*
 * API Endpoints
 * Deliver monetary rewards and incentives to employees, customers, survey participants, and more through the Tremendous API. For organizational tasks, like managing your organization and it's members within Tremendous, please see the Tremendous Organizational API.
 *
 * The version of the OpenAPI document: 2
 * Contact: developers@tremendous.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.net.URI;
import com.konfigthis.client.model.WebhooksCreateWebhookRequest;
import com.konfigthis.client.model.WebhooksCreateWebhookResponse;
import com.konfigthis.client.model.WebhooksGetDetails200Response;
import com.konfigthis.client.model.WebhooksGetDetailsResponse;
import com.konfigthis.client.model.WebhooksListEventsResponse;
import com.konfigthis.client.model.WebhooksTriggerEventRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class WebhooksApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WebhooksApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public WebhooksApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createWebhookCall(WebhooksCreateWebhookRequest webhooksCreateWebhookRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webhooksCreateWebhookRequest;

        // create path and map variables
        String localVarPath = "/webhooks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createWebhookValidateBeforeCall(WebhooksCreateWebhookRequest webhooksCreateWebhookRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webhooksCreateWebhookRequest' is set
        if (webhooksCreateWebhookRequest == null) {
            throw new ApiException("Missing the required parameter 'webhooksCreateWebhookRequest' when calling createWebhook(Async)");
        }

        return createWebhookCall(webhooksCreateWebhookRequest, _callback);

    }


    private ApiResponse<WebhooksCreateWebhookResponse> createWebhookWithHttpInfo(WebhooksCreateWebhookRequest webhooksCreateWebhookRequest) throws ApiException {
        okhttp3.Call localVarCall = createWebhookValidateBeforeCall(webhooksCreateWebhookRequest, null);
        Type localVarReturnType = new TypeToken<WebhooksCreateWebhookResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createWebhookAsync(WebhooksCreateWebhookRequest webhooksCreateWebhookRequest, final ApiCallback<WebhooksCreateWebhookResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createWebhookValidateBeforeCall(webhooksCreateWebhookRequest, _callback);
        Type localVarReturnType = new TypeToken<WebhooksCreateWebhookResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateWebhookRequestBuilder {
        private final URI url;

        private CreateWebhookRequestBuilder(URI url) {
            this.url = url;
        }

        /**
         * Build call for createWebhook
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A webhook (to be overwritten in specific responses) </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WebhooksCreateWebhookRequest webhooksCreateWebhookRequest = buildBodyParams();
            return createWebhookCall(webhooksCreateWebhookRequest, _callback);
        }

        private WebhooksCreateWebhookRequest buildBodyParams() {
            WebhooksCreateWebhookRequest webhooksCreateWebhookRequest = new WebhooksCreateWebhookRequest();
            webhooksCreateWebhookRequest.url(this.url);
            return webhooksCreateWebhookRequest;
        }

        /**
         * Execute createWebhook request
         * @return WebhooksCreateWebhookResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A webhook (to be overwritten in specific responses) </td><td>  -  </td></tr>
         </table>
         */
        public WebhooksCreateWebhookResponse execute() throws ApiException {
            WebhooksCreateWebhookRequest webhooksCreateWebhookRequest = buildBodyParams();
            ApiResponse<WebhooksCreateWebhookResponse> localVarResp = createWebhookWithHttpInfo(webhooksCreateWebhookRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createWebhook request with HTTP info returned
         * @return ApiResponse&lt;WebhooksCreateWebhookResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A webhook (to be overwritten in specific responses) </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebhooksCreateWebhookResponse> executeWithHttpInfo() throws ApiException {
            WebhooksCreateWebhookRequest webhooksCreateWebhookRequest = buildBodyParams();
            return createWebhookWithHttpInfo(webhooksCreateWebhookRequest);
        }

        /**
         * Execute createWebhook request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A webhook (to be overwritten in specific responses) </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebhooksCreateWebhookResponse> _callback) throws ApiException {
            WebhooksCreateWebhookRequest webhooksCreateWebhookRequest = buildBodyParams();
            return createWebhookAsync(webhooksCreateWebhookRequest, _callback);
        }
    }

    /**
     * Create webhook
     * Tremendous uses webhooks as a notification system for various events that happen in your account.  &gt; 📘 Learn more about Webhooks &gt; &gt; Our guide explains everything you need to know about the Tremendous webhooks: &gt; [Read it here](https://developers.tremendous.com/)  Every organization can define a single webhook endpoint where we send requests to, whenever an event happens.  This endpoint allows you to setup that endpoint. The URL of the endpoint can be changed by making a request to this endpoint again with the new URL.  ## Request body  &lt;div class&#x3D;\&quot;object-schema-request-schema\&quot;&gt;   &lt;table&gt;   &lt;thead&gt;     &lt;tr&gt;       &lt;th&gt;Property&lt;/th&gt;       &lt;th&gt;Type&lt;/th&gt;       &lt;th&gt;Description&lt;/th&gt;     &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody class&#x3D;\&quot;object-schema-table-body\&quot;&gt;     &lt;tr class&#x3D;\&quot;\&quot;&gt;&lt;td&gt;&lt;div class&#x3D;\&quot;property-name\&quot;&gt;   &lt;code class&#x3D;\&quot;property-name\&quot;&gt;url&lt;/code&gt; &lt;/div&gt; &lt;/td&gt;&lt;td&gt;&lt;span class&#x3D;\&quot;property-type\&quot;&gt;string&lt;/span&gt; &lt;span class&#x3D;\&quot;property-format\&quot;&gt;uri&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;URL the webhook will make requests to&lt;/p&gt; &lt;/td&gt;&lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;  &lt;/div&gt;  
     * @param webhooksCreateWebhookRequest Webhook details (required)
     * @return CreateWebhookRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A webhook (to be overwritten in specific responses) </td><td>  -  </td></tr>
     </table>
     */
    public CreateWebhookRequestBuilder createWebhook(URI url) throws IllegalArgumentException {
        if (url == null) throw new IllegalArgumentException("\"url\" is required but got null");
            

        return new CreateWebhookRequestBuilder(url);
    }
    private okhttp3.Call getDetailsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDetailsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getDetailsCall(_callback);

    }


    private ApiResponse<WebhooksGetDetailsResponse> getDetailsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<WebhooksGetDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDetailsAsync(final ApiCallback<WebhooksGetDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<WebhooksGetDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDetailsRequestBuilder {

        private GetDetailsRequestBuilder() {
        }

        /**
         * Build call for getDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of configured webhooks (never more than 1 webhook) </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDetailsCall(_callback);
        }


        /**
         * Execute getDetails request
         * @return WebhooksGetDetailsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of configured webhooks (never more than 1 webhook) </td><td>  -  </td></tr>
         </table>
         */
        public WebhooksGetDetailsResponse execute() throws ApiException {
            ApiResponse<WebhooksGetDetailsResponse> localVarResp = getDetailsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDetails request with HTTP info returned
         * @return ApiResponse&lt;WebhooksGetDetailsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of configured webhooks (never more than 1 webhook) </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebhooksGetDetailsResponse> executeWithHttpInfo() throws ApiException {
            return getDetailsWithHttpInfo();
        }

        /**
         * Execute getDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of configured webhooks (never more than 1 webhook) </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebhooksGetDetailsResponse> _callback) throws ApiException {
            return getDetailsAsync(_callback);
        }
    }

    /**
     * List webhooks
     * Every organization can only have one webhook. This endpoint shows the details about that webhook.  &gt; 📘 Learn more about Webhooks &gt; &gt; Our guide explains everything you need to know about the Tremendous webhooks: &gt; [Read it here](https://developers.tremendous.com/) 
     * @return GetDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of configured webhooks (never more than 1 webhook) </td><td>  -  </td></tr>
     </table>
     */
    public GetDetailsRequestBuilder getDetails() throws IllegalArgumentException {
        return new GetDetailsRequestBuilder();
    }
    private okhttp3.Call getDetails_0Call(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDetails_0ValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDetails_0(Async)");
        }

        return getDetails_0Call(id, _callback);

    }


    private ApiResponse<WebhooksGetDetails200Response> getDetails_0WithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getDetails_0ValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<WebhooksGetDetails200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDetails_0Async(String id, final ApiCallback<WebhooksGetDetails200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDetails_0ValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<WebhooksGetDetails200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDetails0RequestBuilder {
        private final String id;

        private GetDetails0RequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for getDetails_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A webhook (to be overwritten in specific responses) </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDetails_0Call(id, _callback);
        }


        /**
         * Execute getDetails_0 request
         * @return WebhooksGetDetails200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A webhook (to be overwritten in specific responses) </td><td>  -  </td></tr>
         </table>
         */
        public WebhooksGetDetails200Response execute() throws ApiException {
            ApiResponse<WebhooksGetDetails200Response> localVarResp = getDetails_0WithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDetails_0 request with HTTP info returned
         * @return ApiResponse&lt;WebhooksGetDetails200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A webhook (to be overwritten in specific responses) </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebhooksGetDetails200Response> executeWithHttpInfo() throws ApiException {
            return getDetails_0WithHttpInfo(id);
        }

        /**
         * Execute getDetails_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A webhook (to be overwritten in specific responses) </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebhooksGetDetails200Response> _callback) throws ApiException {
            return getDetails_0Async(id, _callback);
        }
    }

    /**
     * Retrieve webhook
     * &gt; 📘 Learn more about Webhooks &gt; &gt; Our guide explains everything you need to know about the Tremendous webhooks: &gt; [Read it here](https://developers.tremendous.com/) 
     * @param id ID of the webhook to retrieve (required)
     * @return GetDetails0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A webhook (to be overwritten in specific responses) </td><td>  -  </td></tr>
     </table>
     */
    public GetDetails0RequestBuilder getDetails_0(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetDetails0RequestBuilder(id);
    }
    private okhttp3.Call listEventsCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks/{id}/events"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listEventsValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listEvents(Async)");
        }

        return listEventsCall(id, _callback);

    }


    private ApiResponse<WebhooksListEventsResponse> listEventsWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = listEventsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<WebhooksListEventsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listEventsAsync(String id, final ApiCallback<WebhooksListEventsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listEventsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<WebhooksListEventsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListEventsRequestBuilder {
        private final String id;

        private ListEventsRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for listEvents
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of all possible event types </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listEventsCall(id, _callback);
        }


        /**
         * Execute listEvents request
         * @return WebhooksListEventsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of all possible event types </td><td>  -  </td></tr>
         </table>
         */
        public WebhooksListEventsResponse execute() throws ApiException {
            ApiResponse<WebhooksListEventsResponse> localVarResp = listEventsWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listEvents request with HTTP info returned
         * @return ApiResponse&lt;WebhooksListEventsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of all possible event types </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebhooksListEventsResponse> executeWithHttpInfo() throws ApiException {
            return listEventsWithHttpInfo(id);
        }

        /**
         * Execute listEvents request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of all possible event types </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebhooksListEventsResponse> _callback) throws ApiException {
            return listEventsAsync(id, _callback);
        }
    }

    /**
     * List events
     * Lists all event types that can be sent to the configured webhook endpoint.  &gt; 📘 Learn more about Webhooks &gt; &gt; Our guide explains everything you need to know about the Tremendous webhooks: &gt; [Read it here](https://developers.tremendous.com/) 
     * @param id ID of the webhook to list the events for (required)
     * @return ListEventsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all possible event types </td><td>  -  </td></tr>
     </table>
     */
    public ListEventsRequestBuilder listEvents(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new ListEventsRequestBuilder(id);
    }
    private okhttp3.Call triggerEventCall(String id, WebhooksTriggerEventRequest webhooksTriggerEventRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webhooksTriggerEventRequest;

        // create path and map variables
        String localVarPath = "/webhooks/{id}/simulate"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/html",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call triggerEventValidateBeforeCall(String id, WebhooksTriggerEventRequest webhooksTriggerEventRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling triggerEvent(Async)");
        }

        // verify the required parameter 'webhooksTriggerEventRequest' is set
        if (webhooksTriggerEventRequest == null) {
            throw new ApiException("Missing the required parameter 'webhooksTriggerEventRequest' when calling triggerEvent(Async)");
        }

        return triggerEventCall(id, webhooksTriggerEventRequest, _callback);

    }


    private ApiResponse<String> triggerEventWithHttpInfo(String id, WebhooksTriggerEventRequest webhooksTriggerEventRequest) throws ApiException {
        okhttp3.Call localVarCall = triggerEventValidateBeforeCall(id, webhooksTriggerEventRequest, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call triggerEventAsync(String id, WebhooksTriggerEventRequest webhooksTriggerEventRequest, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = triggerEventValidateBeforeCall(id, webhooksTriggerEventRequest, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class TriggerEventRequestBuilder {
        private final String event;
        private final String id;

        private TriggerEventRequestBuilder(String event, String id) {
            this.event = event;
            this.id = id;
        }

        /**
         * Build call for triggerEvent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Webhook simulation triggered successfully </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WebhooksTriggerEventRequest webhooksTriggerEventRequest = buildBodyParams();
            return triggerEventCall(id, webhooksTriggerEventRequest, _callback);
        }

        private WebhooksTriggerEventRequest buildBodyParams() {
            WebhooksTriggerEventRequest webhooksTriggerEventRequest = new WebhooksTriggerEventRequest();
            webhooksTriggerEventRequest.event(this.event);
            return webhooksTriggerEventRequest;
        }

        /**
         * Execute triggerEvent request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Webhook simulation triggered successfully </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            WebhooksTriggerEventRequest webhooksTriggerEventRequest = buildBodyParams();
            ApiResponse<String> localVarResp = triggerEventWithHttpInfo(id, webhooksTriggerEventRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute triggerEvent request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Webhook simulation triggered successfully </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            WebhooksTriggerEventRequest webhooksTriggerEventRequest = buildBodyParams();
            return triggerEventWithHttpInfo(id, webhooksTriggerEventRequest);
        }

        /**
         * Execute triggerEvent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Webhook simulation triggered successfully </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            WebhooksTriggerEventRequest webhooksTriggerEventRequest = buildBodyParams();
            return triggerEventAsync(id, webhooksTriggerEventRequest, _callback);
        }
    }

    /**
     * Test webhook
     * Making a request to this endpoint will cause our system to trigger a webhook for the specified event. This can be very useful when testing the setup that processes webhooks on your end.  &gt; 📘 Learn more about Webhooks &gt; &gt; Our guide explains everything you need to know about the Tremendous webhooks: &gt; [Read it here](https://developers.tremendous.com/) 
     * @param id ID of the webhook to test (required)
     * @param webhooksTriggerEventRequest Webhook details (required)
     * @return TriggerEventRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Webhook simulation triggered successfully </td><td>  -  </td></tr>
     </table>
     */
    public TriggerEventRequestBuilder triggerEvent(String event, String id) throws IllegalArgumentException {
        if (event == null) throw new IllegalArgumentException("\"event\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new TriggerEventRequestBuilder(event, id);
    }
}
