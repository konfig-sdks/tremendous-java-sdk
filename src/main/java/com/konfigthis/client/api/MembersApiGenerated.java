/*
 * API Endpoints
 * Deliver monetary rewards and incentives to employees, customers, survey participants, and more through the Tremendous API. For organizational tasks, like managing your organization and it's members within Tremendous, please see the Tremendous Organizational API.
 *
 * The version of the OpenAPI document: 2
 * Contact: developers@tremendous.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.MembersCreateNewMemberRequest;
import com.konfigthis.client.model.MembersCreateNewMemberResponse;
import com.konfigthis.client.model.MembersGetMemberResponse;
import com.konfigthis.client.model.MembersListMembersResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class MembersApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MembersApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public MembersApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewMemberCall(MembersCreateNewMemberRequest membersCreateNewMemberRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = membersCreateNewMemberRequest;

        // create path and map variables
        String localVarPath = "/members";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewMemberValidateBeforeCall(MembersCreateNewMemberRequest membersCreateNewMemberRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'membersCreateNewMemberRequest' is set
        if (membersCreateNewMemberRequest == null) {
            throw new ApiException("Missing the required parameter 'membersCreateNewMemberRequest' when calling createNewMember(Async)");
        }

        return createNewMemberCall(membersCreateNewMemberRequest, _callback);

    }


    private ApiResponse<MembersCreateNewMemberResponse> createNewMemberWithHttpInfo(MembersCreateNewMemberRequest membersCreateNewMemberRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewMemberValidateBeforeCall(membersCreateNewMemberRequest, null);
        Type localVarReturnType = new TypeToken<MembersCreateNewMemberResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewMemberAsync(MembersCreateNewMemberRequest membersCreateNewMemberRequest, final ApiCallback<MembersCreateNewMemberResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewMemberValidateBeforeCall(membersCreateNewMemberRequest, _callback);
        Type localVarReturnType = new TypeToken<MembersCreateNewMemberResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewMemberRequestBuilder {
        private final String email;
        private final String name;
        private final String role;

        private CreateNewMemberRequestBuilder(String email, String name, String role) {
            this.email = email;
            this.name = name;
            this.role = role;
        }

        /**
         * Build call for createNewMember
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A member (to be overwritten in specific responses) </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MembersCreateNewMemberRequest membersCreateNewMemberRequest = buildBodyParams();
            return createNewMemberCall(membersCreateNewMemberRequest, _callback);
        }

        private MembersCreateNewMemberRequest buildBodyParams() {
            MembersCreateNewMemberRequest membersCreateNewMemberRequest = new MembersCreateNewMemberRequest();
            membersCreateNewMemberRequest.email(this.email);
            membersCreateNewMemberRequest.name(this.name);
            if (this.role != null)
            membersCreateNewMemberRequest.role(MembersCreateNewMemberRequest.RoleEnum.fromValue(this.role));
            return membersCreateNewMemberRequest;
        }

        /**
         * Execute createNewMember request
         * @return MembersCreateNewMemberResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A member (to be overwritten in specific responses) </td><td>  -  </td></tr>
         </table>
         */
        public MembersCreateNewMemberResponse execute() throws ApiException {
            MembersCreateNewMemberRequest membersCreateNewMemberRequest = buildBodyParams();
            ApiResponse<MembersCreateNewMemberResponse> localVarResp = createNewMemberWithHttpInfo(membersCreateNewMemberRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewMember request with HTTP info returned
         * @return ApiResponse&lt;MembersCreateNewMemberResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A member (to be overwritten in specific responses) </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MembersCreateNewMemberResponse> executeWithHttpInfo() throws ApiException {
            MembersCreateNewMemberRequest membersCreateNewMemberRequest = buildBodyParams();
            return createNewMemberWithHttpInfo(membersCreateNewMemberRequest);
        }

        /**
         * Execute createNewMember request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A member (to be overwritten in specific responses) </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MembersCreateNewMemberResponse> _callback) throws ApiException {
            MembersCreateNewMemberRequest membersCreateNewMemberRequest = buildBodyParams();
            return createNewMemberAsync(membersCreateNewMemberRequest, _callback);
        }
    }

    /**
     * Create member
     * Each organization has one or more users that can access and manage that organization. These users are called members.  Members can take actions via the Tremendous web dashboard directly. These actions include adding funding sources to the organization, creating Campaigns, and more.  ### Permissions  Members can have one of two roles that determine their permissions within the organization:  1. &#x60;MEMBER&#x60;: Limited permissions. Can view their own reward and order histories only. 2. &#x60;ADMIN&#x60;: Update organization settings, invite other members to the organization, and view all member order and reward histories within their organization.  To create members of a sub-organizations [create an API key for that organization](https://developers.tremendous.com/) first, then use the new API key in the create member request.  ### Inviting new members  After creating a member, an automatic invite is sent to the email address. If the user is not registered yet, that person will then need to sign up for a Tremendous account.  &gt; ❗️ Automatic invitations are not available in the sandbox &gt; &gt; You must manually use the returned &#x60;invite_url&#x60; field in the payload instead. 
     * @param membersCreateNewMemberRequest Member details (required)
     * @return CreateNewMemberRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A member (to be overwritten in specific responses) </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewMemberRequestBuilder createNewMember(String email, String name, String role) throws IllegalArgumentException {
        if (email == null) throw new IllegalArgumentException("\"email\" is required but got null");
            

        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (role == null) throw new IllegalArgumentException("\"role\" is required but got null");
            

        return new CreateNewMemberRequestBuilder(email, name, role);
    }
    private okhttp3.Call getMemberCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMemberValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getMember(Async)");
        }

        return getMemberCall(id, _callback);

    }


    private ApiResponse<MembersGetMemberResponse> getMemberWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getMemberValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<MembersGetMemberResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMemberAsync(String id, final ApiCallback<MembersGetMemberResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMemberValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<MembersGetMemberResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetMemberRequestBuilder {
        private final String id;

        private GetMemberRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for getMember
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Details on the retrieved member </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMemberCall(id, _callback);
        }


        /**
         * Execute getMember request
         * @return MembersGetMemberResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Details on the retrieved member </td><td>  -  </td></tr>
         </table>
         */
        public MembersGetMemberResponse execute() throws ApiException {
            ApiResponse<MembersGetMemberResponse> localVarResp = getMemberWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getMember request with HTTP info returned
         * @return ApiResponse&lt;MembersGetMemberResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Details on the retrieved member </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MembersGetMemberResponse> executeWithHttpInfo() throws ApiException {
            return getMemberWithHttpInfo(id);
        }

        /**
         * Execute getMember request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Details on the retrieved member </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MembersGetMemberResponse> _callback) throws ApiException {
            return getMemberAsync(id, _callback);
        }
    }

    /**
     * Retrieve member
     * 
     * @param id ID of the member to retrieve (required)
     * @return GetMemberRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Details on the retrieved member </td><td>  -  </td></tr>
     </table>
     */
    public GetMemberRequestBuilder getMember(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetMemberRequestBuilder(id);
    }
    private okhttp3.Call listMembersCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/members";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMembersValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listMembersCall(_callback);

    }


    private ApiResponse<MembersListMembersResponse> listMembersWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listMembersValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<MembersListMembersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listMembersAsync(final ApiCallback<MembersListMembersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMembersValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<MembersListMembersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListMembersRequestBuilder {

        private ListMembersRequestBuilder() {
        }

        /**
         * Build call for listMembers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of all members </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listMembersCall(_callback);
        }


        /**
         * Execute listMembers request
         * @return MembersListMembersResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of all members </td><td>  -  </td></tr>
         </table>
         */
        public MembersListMembersResponse execute() throws ApiException {
            ApiResponse<MembersListMembersResponse> localVarResp = listMembersWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listMembers request with HTTP info returned
         * @return ApiResponse&lt;MembersListMembersResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of all members </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MembersListMembersResponse> executeWithHttpInfo() throws ApiException {
            return listMembersWithHttpInfo();
        }

        /**
         * Execute listMembers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of all members </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MembersListMembersResponse> _callback) throws ApiException {
            return listMembersAsync(_callback);
        }
    }

    /**
     * List members
     * To list members of a sub-organization [create an API key for that organization](https://developers.tremendous.com/) first, then use the new API key in the list members request. 
     * @return ListMembersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all members </td><td>  -  </td></tr>
     </table>
     */
    public ListMembersRequestBuilder listMembers() throws IllegalArgumentException {
        return new ListMembersRequestBuilder();
    }
}
