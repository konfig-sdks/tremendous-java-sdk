/*
 * API Endpoints
 * Deliver monetary rewards and incentives to employees, customers, survey participants, and more through the Tremendous API. For organizational tasks, like managing your organization and it's members within Tremendous, please see the Tremendous Organizational API.
 *
 * The version of the OpenAPI document: 2
 * Contact: developers@tremendous.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import com.konfigthis.client.model.InvoicesCreateAndFundAccountBalanceRequest;
import com.konfigthis.client.model.InvoicesCreateAndFundAccountBalanceResponse;
import com.konfigthis.client.model.InvoicesGetAllResponse;
import com.konfigthis.client.model.InvoicesGetByIdResponse;
import com.konfigthis.client.model.InvoicesRemoveInvoiceResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class InvoicesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public InvoicesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public InvoicesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createAndFundAccountBalanceCall(InvoicesCreateAndFundAccountBalanceRequest invoicesCreateAndFundAccountBalanceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = invoicesCreateAndFundAccountBalanceRequest;

        // create path and map variables
        String localVarPath = "/invoices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAndFundAccountBalanceValidateBeforeCall(InvoicesCreateAndFundAccountBalanceRequest invoicesCreateAndFundAccountBalanceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invoicesCreateAndFundAccountBalanceRequest' is set
        if (invoicesCreateAndFundAccountBalanceRequest == null) {
            throw new ApiException("Missing the required parameter 'invoicesCreateAndFundAccountBalanceRequest' when calling createAndFundAccountBalance(Async)");
        }

        return createAndFundAccountBalanceCall(invoicesCreateAndFundAccountBalanceRequest, _callback);

    }


    private ApiResponse<InvoicesCreateAndFundAccountBalanceResponse> createAndFundAccountBalanceWithHttpInfo(InvoicesCreateAndFundAccountBalanceRequest invoicesCreateAndFundAccountBalanceRequest) throws ApiException {
        okhttp3.Call localVarCall = createAndFundAccountBalanceValidateBeforeCall(invoicesCreateAndFundAccountBalanceRequest, null);
        Type localVarReturnType = new TypeToken<InvoicesCreateAndFundAccountBalanceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createAndFundAccountBalanceAsync(InvoicesCreateAndFundAccountBalanceRequest invoicesCreateAndFundAccountBalanceRequest, final ApiCallback<InvoicesCreateAndFundAccountBalanceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAndFundAccountBalanceValidateBeforeCall(invoicesCreateAndFundAccountBalanceRequest, _callback);
        Type localVarReturnType = new TypeToken<InvoicesCreateAndFundAccountBalanceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateAndFundAccountBalanceRequestBuilder {
        private final Double amount;
        private String poNumber;
        private String memo;

        private CreateAndFundAccountBalanceRequestBuilder(Double amount) {
            this.amount = amount;
        }

        /**
         * Set poNumber
         * @param poNumber Reference to the purchase order number within your organization (optional)
         * @return CreateAndFundAccountBalanceRequestBuilder
         */
        public CreateAndFundAccountBalanceRequestBuilder poNumber(String poNumber) {
            this.poNumber = poNumber;
            return this;
        }
        
        /**
         * Set memo
         * @param memo A note to be included in the invoice. This is for your internal use and will not be visible to the recipient.  (optional)
         * @return CreateAndFundAccountBalanceRequestBuilder
         */
        public CreateAndFundAccountBalanceRequestBuilder memo(String memo) {
            this.memo = memo;
            return this;
        }
        
        /**
         * Build call for createAndFundAccountBalance
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An invoice (to be overwritten in specific reponses) </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            InvoicesCreateAndFundAccountBalanceRequest invoicesCreateAndFundAccountBalanceRequest = buildBodyParams();
            return createAndFundAccountBalanceCall(invoicesCreateAndFundAccountBalanceRequest, _callback);
        }

        private InvoicesCreateAndFundAccountBalanceRequest buildBodyParams() {
            InvoicesCreateAndFundAccountBalanceRequest invoicesCreateAndFundAccountBalanceRequest = new InvoicesCreateAndFundAccountBalanceRequest();
            invoicesCreateAndFundAccountBalanceRequest.poNumber(this.poNumber);
            invoicesCreateAndFundAccountBalanceRequest.amount(this.amount);
            invoicesCreateAndFundAccountBalanceRequest.memo(this.memo);
            return invoicesCreateAndFundAccountBalanceRequest;
        }

        /**
         * Execute createAndFundAccountBalance request
         * @return InvoicesCreateAndFundAccountBalanceResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An invoice (to be overwritten in specific reponses) </td><td>  -  </td></tr>
         </table>
         */
        public InvoicesCreateAndFundAccountBalanceResponse execute() throws ApiException {
            InvoicesCreateAndFundAccountBalanceRequest invoicesCreateAndFundAccountBalanceRequest = buildBodyParams();
            ApiResponse<InvoicesCreateAndFundAccountBalanceResponse> localVarResp = createAndFundAccountBalanceWithHttpInfo(invoicesCreateAndFundAccountBalanceRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createAndFundAccountBalance request with HTTP info returned
         * @return ApiResponse&lt;InvoicesCreateAndFundAccountBalanceResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An invoice (to be overwritten in specific reponses) </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InvoicesCreateAndFundAccountBalanceResponse> executeWithHttpInfo() throws ApiException {
            InvoicesCreateAndFundAccountBalanceRequest invoicesCreateAndFundAccountBalanceRequest = buildBodyParams();
            return createAndFundAccountBalanceWithHttpInfo(invoicesCreateAndFundAccountBalanceRequest);
        }

        /**
         * Execute createAndFundAccountBalance request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An invoice (to be overwritten in specific reponses) </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InvoicesCreateAndFundAccountBalanceResponse> _callback) throws ApiException {
            InvoicesCreateAndFundAccountBalanceRequest invoicesCreateAndFundAccountBalanceRequest = buildBodyParams();
            return createAndFundAccountBalanceAsync(invoicesCreateAndFundAccountBalanceRequest, _callback);
        }
    }

    /**
     * Create invoice
     * Creating an invoice is the way for your organization to fund your account&#39;s balance.  1. Create an invoice 2. Pay the invoice 3. Funds get added to your account&#39;s balance  ## Request body  &lt;div class&#x3D;\&quot;object-schema-request-schema\&quot;&gt;   &lt;table&gt;   &lt;thead&gt;     &lt;tr&gt;       &lt;th&gt;Property&lt;/th&gt;       &lt;th&gt;Type&lt;/th&gt;       &lt;th&gt;Description&lt;/th&gt;     &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody class&#x3D;\&quot;object-schema-table-body\&quot;&gt;     &lt;tr class&#x3D;\&quot;\&quot;&gt;&lt;td&gt;&lt;div class&#x3D;\&quot;property-name\&quot;&gt;   &lt;code class&#x3D;\&quot;property-name\&quot;&gt;po_number&lt;/code&gt; &lt;/div&gt; &lt;/td&gt;&lt;td&gt;&lt;span class&#x3D;\&quot;property-type\&quot;&gt;string&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;Reference to the purchase order number within your organization&lt;/p&gt; &lt;/td&gt;&lt;/tr&gt; &lt;tr class&#x3D;\&quot;\&quot;&gt;&lt;td&gt;&lt;div class&#x3D;\&quot;property-name\&quot;&gt;   &lt;code class&#x3D;\&quot;property-name\&quot;&gt;amount&lt;/code&gt; &lt;/div&gt; &lt;/td&gt;&lt;td&gt;&lt;span class&#x3D;\&quot;property-type\&quot;&gt;number&lt;/span&gt; &lt;span class&#x3D;\&quot;property-format\&quot;&gt;double&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;Amount of the invoice in USD&lt;/p&gt; &lt;/td&gt;&lt;/tr&gt; &lt;tr class&#x3D;\&quot;\&quot;&gt;&lt;td&gt;&lt;div class&#x3D;\&quot;property-name\&quot;&gt;   &lt;code class&#x3D;\&quot;property-name\&quot;&gt;memo&lt;/code&gt; &lt;/div&gt; &lt;/td&gt;&lt;td&gt;&lt;span class&#x3D;\&quot;property-type\&quot;&gt;string&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;A note to be included in the invoice. This is for your internal use and will not be visible to the recipient.&lt;/p&gt; &lt;/td&gt;&lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;  &lt;/div&gt;  
     * @param invoicesCreateAndFundAccountBalanceRequest Invoice details (required)
     * @return CreateAndFundAccountBalanceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An invoice (to be overwritten in specific reponses) </td><td>  -  </td></tr>
     </table>
     */
    public CreateAndFundAccountBalanceRequestBuilder createAndFundAccountBalance(Double amount) throws IllegalArgumentException {
        if (amount == null) throw new IllegalArgumentException("\"amount\" is required but got null");
        return new CreateAndFundAccountBalanceRequestBuilder(amount);
    }
    private okhttp3.Call getAllCall(Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/invoices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllValidateBeforeCall(Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        return getAllCall(offset, limit, _callback);

    }


    private ApiResponse<InvoicesGetAllResponse> getAllWithHttpInfo(Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getAllValidateBeforeCall(offset, limit, null);
        Type localVarReturnType = new TypeToken<InvoicesGetAllResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllAsync(Integer offset, Integer limit, final ApiCallback<InvoicesGetAllResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllValidateBeforeCall(offset, limit, _callback);
        Type localVarReturnType = new TypeToken<InvoicesGetAllResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllRequestBuilder {
        private Integer offset;
        private Integer limit;

        private GetAllRequestBuilder() {
        }

        /**
         * Set offset
         * @param offset Offsets the returned list by the given number of invoices. The returned invoices are ordered (and offsetted) by their creation date (DESC). (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Limits the number of invoices listed. The maximum and default value is 10. (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for getAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of all invoices in state &#x60;PAID&#x60; or &#x60;OPEN&#x60; </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllCall(offset, limit, _callback);
        }


        /**
         * Execute getAll request
         * @return InvoicesGetAllResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of all invoices in state &#x60;PAID&#x60; or &#x60;OPEN&#x60; </td><td>  -  </td></tr>
         </table>
         */
        public InvoicesGetAllResponse execute() throws ApiException {
            ApiResponse<InvoicesGetAllResponse> localVarResp = getAllWithHttpInfo(offset, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAll request with HTTP info returned
         * @return ApiResponse&lt;InvoicesGetAllResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of all invoices in state &#x60;PAID&#x60; or &#x60;OPEN&#x60; </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InvoicesGetAllResponse> executeWithHttpInfo() throws ApiException {
            return getAllWithHttpInfo(offset, limit);
        }

        /**
         * Execute getAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of all invoices in state &#x60;PAID&#x60; or &#x60;OPEN&#x60; </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InvoicesGetAllResponse> _callback) throws ApiException {
            return getAllAsync(offset, limit, _callback);
        }
    }

    /**
     * List invoices
     * Fetch a list of all invoices on your account.  &gt; 🚧 Deleted invoices are omitted &gt; &gt; The response does not include any previously deleted invoices. 
     * @return GetAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all invoices in state &#x60;PAID&#x60; or &#x60;OPEN&#x60; </td><td>  -  </td></tr>
     </table>
     */
    public GetAllRequestBuilder getAll() throws IllegalArgumentException {
        return new GetAllRequestBuilder();
    }
    private okhttp3.Call getByIdCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/invoices/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getById(Async)");
        }

        return getByIdCall(id, _callback);

    }


    private ApiResponse<InvoicesGetByIdResponse> getByIdWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<InvoicesGetByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String id, final ApiCallback<InvoicesGetByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<InvoicesGetByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String id;

        private GetByIdRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An invoice (to be overwritten in specific reponses) </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(id, _callback);
        }


        /**
         * Execute getById request
         * @return InvoicesGetByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An invoice (to be overwritten in specific reponses) </td><td>  -  </td></tr>
         </table>
         */
        public InvoicesGetByIdResponse execute() throws ApiException {
            ApiResponse<InvoicesGetByIdResponse> localVarResp = getByIdWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;InvoicesGetByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An invoice (to be overwritten in specific reponses) </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InvoicesGetByIdResponse> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(id);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An invoice (to be overwritten in specific reponses) </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InvoicesGetByIdResponse> _callback) throws ApiException {
            return getByIdAsync(id, _callback);
        }
    }

    /**
     * Retrieve invoice
     * Retrieve an invoice, identified by the given &#x60;id&#x60; in the URL  &gt; 📘 Deleted Invoices &gt; &gt; This endpoint can be used to retrieve details on deleted invoices &gt; that the list of invoices omits. 
     * @param id ID of the invoice that should be retrieved (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An invoice (to be overwritten in specific reponses) </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetByIdRequestBuilder(id);
    }
    private okhttp3.Call getCsvCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/invoices/{id}/csv"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/csv",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCsvValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCsv(Async)");
        }

        return getCsvCall(id, _callback);

    }


    private ApiResponse<String> getCsvWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getCsvValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCsvAsync(String id, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCsvValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCsvRequestBuilder {
        private final String id;

        private GetCsvRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for getCsv
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> CSV for the specified Invoice </td><td>  * Content-Disposition -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCsvCall(id, _callback);
        }


        /**
         * Execute getCsv request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> CSV for the specified Invoice </td><td>  * Content-Disposition -  <br>  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = getCsvWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCsv request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> CSV for the specified Invoice </td><td>  * Content-Disposition -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return getCsvWithHttpInfo(id);
        }

        /**
         * Execute getCsv request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> CSV for the specified Invoice </td><td>  * Content-Disposition -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return getCsvAsync(id, _callback);
        }
    }

    /**
     * Retrieve invoice as CSV
     * Generates a CSV version for an invoice listing the associated rewards and orders 
     * @param id ID of the Invoice for that the CSV should be generated (required)
     * @return GetCsvRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> CSV for the specified Invoice </td><td>  * Content-Disposition -  <br>  </td></tr>
     </table>
     */
    public GetCsvRequestBuilder getCsv(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetCsvRequestBuilder(id);
    }
    private okhttp3.Call getPdfCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/invoices/{id}/pdf"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/pdf",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPdfValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getPdf(Async)");
        }

        return getPdfCall(id, _callback);

    }


    private ApiResponse<File> getPdfWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getPdfValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPdfAsync(String id, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPdfValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPdfRequestBuilder {
        private final String id;

        private GetPdfRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for getPdf
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> PDF for the specified Invoice </td><td>  * Content-Disposition -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPdfCall(id, _callback);
        }


        /**
         * Execute getPdf request
         * @return File
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> PDF for the specified Invoice </td><td>  * Content-Disposition -  <br>  </td></tr>
         </table>
         */
        public File execute() throws ApiException {
            ApiResponse<File> localVarResp = getPdfWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPdf request with HTTP info returned
         * @return ApiResponse&lt;File&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> PDF for the specified Invoice </td><td>  * Content-Disposition -  <br>  </td></tr>
         </table>
         */
        public ApiResponse<File> executeWithHttpInfo() throws ApiException {
            return getPdfWithHttpInfo(id);
        }

        /**
         * Execute getPdf request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> PDF for the specified Invoice </td><td>  * Content-Disposition -  <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<File> _callback) throws ApiException {
            return getPdfAsync(id, _callback);
        }
    }

    /**
     * Retrieve invoice as PDF
     * Generates a PDF version for an invoice 
     * @param id ID of the Invoice for that the PDF should be generated (required)
     * @return GetPdfRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> PDF for the specified Invoice </td><td>  * Content-Disposition -  <br>  </td></tr>
     </table>
     */
    public GetPdfRequestBuilder getPdf(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetPdfRequestBuilder(id);
    }
    private okhttp3.Call removeInvoiceCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/invoices/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeInvoiceValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling removeInvoice(Async)");
        }

        return removeInvoiceCall(id, _callback);

    }


    private ApiResponse<InvoicesRemoveInvoiceResponse> removeInvoiceWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = removeInvoiceValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<InvoicesRemoveInvoiceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeInvoiceAsync(String id, final ApiCallback<InvoicesRemoveInvoiceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeInvoiceValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<InvoicesRemoveInvoiceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveInvoiceRequestBuilder {
        private final String id;

        private RemoveInvoiceRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for removeInvoice
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An invoice (to be overwritten in specific reponses) </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeInvoiceCall(id, _callback);
        }


        /**
         * Execute removeInvoice request
         * @return InvoicesRemoveInvoiceResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An invoice (to be overwritten in specific reponses) </td><td>  -  </td></tr>
         </table>
         */
        public InvoicesRemoveInvoiceResponse execute() throws ApiException {
            ApiResponse<InvoicesRemoveInvoiceResponse> localVarResp = removeInvoiceWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeInvoice request with HTTP info returned
         * @return ApiResponse&lt;InvoicesRemoveInvoiceResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An invoice (to be overwritten in specific reponses) </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InvoicesRemoveInvoiceResponse> executeWithHttpInfo() throws ApiException {
            return removeInvoiceWithHttpInfo(id);
        }

        /**
         * Execute removeInvoice request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An invoice (to be overwritten in specific reponses) </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InvoicesRemoveInvoiceResponse> _callback) throws ApiException {
            return removeInvoiceAsync(id, _callback);
        }
    }

    /**
     * Delete invoice
     * Removes an invoice. This has no further consequences but is a rather cosmetic operation. 
     * @param id ID of the invoice that should be retrieved (required)
     * @return RemoveInvoiceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An invoice (to be overwritten in specific reponses) </td><td>  -  </td></tr>
     </table>
     */
    public RemoveInvoiceRequestBuilder removeInvoice(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new RemoveInvoiceRequestBuilder(id);
    }
}
