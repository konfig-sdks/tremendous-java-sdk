/*
 * API Endpoints
 * Deliver monetary rewards and incentives to employees, customers, survey participants, and more through the Tremendous API. For organizational tasks, like managing your organization and it's members within Tremendous, please see the Tremendous Organizational API.
 *
 * The version of the OpenAPI document: 2
 * Contact: developers@tremendous.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.OrganizationsCreateApiKeyResponse;
import com.konfigthis.client.model.OrganizationsCreateNewOrganizationRequest;
import com.konfigthis.client.model.OrganizationsCreateNewOrganizationRequestCopySettings;
import com.konfigthis.client.model.OrganizationsCreateNewOrganizationResponse;
import com.konfigthis.client.model.OrganizationsGetListResponse;
import com.konfigthis.client.model.OrganizationsGetOrganizationResponse;
import java.net.URI;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class OrganizationsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OrganizationsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public OrganizationsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createApiKeyCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/create_api_key";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createApiKeyValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return createApiKeyCall(_callback);

    }


    private ApiResponse<OrganizationsCreateApiKeyResponse> createApiKeyWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = createApiKeyValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<OrganizationsCreateApiKeyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createApiKeyAsync(final ApiCallback<OrganizationsCreateApiKeyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createApiKeyValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<OrganizationsCreateApiKeyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateApiKeyRequestBuilder {

        private CreateApiKeyRequestBuilder() {
        }

        /**
         * Build call for createApiKey
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The created API key </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createApiKeyCall(_callback);
        }


        /**
         * Execute createApiKey request
         * @return OrganizationsCreateApiKeyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The created API key </td><td>  -  </td></tr>
         </table>
         */
        public OrganizationsCreateApiKeyResponse execute() throws ApiException {
            ApiResponse<OrganizationsCreateApiKeyResponse> localVarResp = createApiKeyWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createApiKey request with HTTP info returned
         * @return ApiResponse&lt;OrganizationsCreateApiKeyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The created API key </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OrganizationsCreateApiKeyResponse> executeWithHttpInfo() throws ApiException {
            return createApiKeyWithHttpInfo();
        }

        /**
         * Execute createApiKey request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The created API key </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OrganizationsCreateApiKeyResponse> _callback) throws ApiException {
            return createApiKeyAsync(_callback);
        }
    }

    /**
     * Create API key
     * Creates a new API key. The API key used to make the request will remain active.  Created API keys are generated randomly and returned in the response. **You cannot retrieve them again.** 
     * @return CreateApiKeyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The created API key </td><td>  -  </td></tr>
     </table>
     */
    public CreateApiKeyRequestBuilder createApiKey() throws IllegalArgumentException {
        return new CreateApiKeyRequestBuilder();
    }
    private okhttp3.Call createNewOrganizationCall(OrganizationsCreateNewOrganizationRequest organizationsCreateNewOrganizationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = organizationsCreateNewOrganizationRequest;

        // create path and map variables
        String localVarPath = "/organizations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewOrganizationValidateBeforeCall(OrganizationsCreateNewOrganizationRequest organizationsCreateNewOrganizationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationsCreateNewOrganizationRequest' is set
        if (organizationsCreateNewOrganizationRequest == null) {
            throw new ApiException("Missing the required parameter 'organizationsCreateNewOrganizationRequest' when calling createNewOrganization(Async)");
        }

        return createNewOrganizationCall(organizationsCreateNewOrganizationRequest, _callback);

    }


    private ApiResponse<OrganizationsCreateNewOrganizationResponse> createNewOrganizationWithHttpInfo(OrganizationsCreateNewOrganizationRequest organizationsCreateNewOrganizationRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewOrganizationValidateBeforeCall(organizationsCreateNewOrganizationRequest, null);
        Type localVarReturnType = new TypeToken<OrganizationsCreateNewOrganizationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewOrganizationAsync(OrganizationsCreateNewOrganizationRequest organizationsCreateNewOrganizationRequest, final ApiCallback<OrganizationsCreateNewOrganizationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewOrganizationValidateBeforeCall(organizationsCreateNewOrganizationRequest, _callback);
        Type localVarReturnType = new TypeToken<OrganizationsCreateNewOrganizationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewOrganizationRequestBuilder {
        private final String name;
        private final URI website;
        private Boolean withApiKey;
        private OrganizationsCreateNewOrganizationRequestCopySettings copySettings;
        private String phone;

        private CreateNewOrganizationRequestBuilder(String name, URI website) {
            this.name = name;
            this.website = website;
        }

        /**
         * Set withApiKey
         * @param withApiKey Default value is &#x60;false&#x60;. Set to true to also generate an API key associated to the new organization. (optional)
         * @return CreateNewOrganizationRequestBuilder
         */
        public CreateNewOrganizationRequestBuilder withApiKey(Boolean withApiKey) {
            this.withApiKey = withApiKey;
            return this;
        }
        
        /**
         * Set copySettings
         * @param copySettings  (optional)
         * @return CreateNewOrganizationRequestBuilder
         */
        public CreateNewOrganizationRequestBuilder copySettings(OrganizationsCreateNewOrganizationRequestCopySettings copySettings) {
            this.copySettings = copySettings;
            return this;
        }
        
        /**
         * Set phone
         * @param phone Phone number of the organization. For non-US phone numbers, specify the country code (prefixed with +). (optional)
         * @return CreateNewOrganizationRequestBuilder
         */
        public CreateNewOrganizationRequestBuilder phone(String phone) {
            this.phone = phone;
            return this;
        }
        
        /**
         * Build call for createNewOrganization
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The created organization </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            OrganizationsCreateNewOrganizationRequest organizationsCreateNewOrganizationRequest = buildBodyParams();
            return createNewOrganizationCall(organizationsCreateNewOrganizationRequest, _callback);
        }

        private OrganizationsCreateNewOrganizationRequest buildBodyParams() {
            OrganizationsCreateNewOrganizationRequest organizationsCreateNewOrganizationRequest = new OrganizationsCreateNewOrganizationRequest();
            organizationsCreateNewOrganizationRequest.name(this.name);
            organizationsCreateNewOrganizationRequest.website(this.website);
            organizationsCreateNewOrganizationRequest.withApiKey(this.withApiKey);
            organizationsCreateNewOrganizationRequest.copySettings(this.copySettings);
            organizationsCreateNewOrganizationRequest.phone(this.phone);
            return organizationsCreateNewOrganizationRequest;
        }

        /**
         * Execute createNewOrganization request
         * @return OrganizationsCreateNewOrganizationResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The created organization </td><td>  -  </td></tr>
         </table>
         */
        public OrganizationsCreateNewOrganizationResponse execute() throws ApiException {
            OrganizationsCreateNewOrganizationRequest organizationsCreateNewOrganizationRequest = buildBodyParams();
            ApiResponse<OrganizationsCreateNewOrganizationResponse> localVarResp = createNewOrganizationWithHttpInfo(organizationsCreateNewOrganizationRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewOrganization request with HTTP info returned
         * @return ApiResponse&lt;OrganizationsCreateNewOrganizationResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The created organization </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OrganizationsCreateNewOrganizationResponse> executeWithHttpInfo() throws ApiException {
            OrganizationsCreateNewOrganizationRequest organizationsCreateNewOrganizationRequest = buildBodyParams();
            return createNewOrganizationWithHttpInfo(organizationsCreateNewOrganizationRequest);
        }

        /**
         * Execute createNewOrganization request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The created organization </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OrganizationsCreateNewOrganizationResponse> _callback) throws ApiException {
            OrganizationsCreateNewOrganizationRequest organizationsCreateNewOrganizationRequest = buildBodyParams();
            return createNewOrganizationAsync(organizationsCreateNewOrganizationRequest, _callback);
        }
    }

    /**
     * Create organization
     * Organizations are a way to separate different parts of your business within the same Tremendous account.  You can assign users in your Tremendous team as members to any organization. Users can be members of multiple organizations at once.  API keys belong to a single organization. The API key used in a request determines on behalf of which organization the request is carried out.  **Important note:** When creating an organization, you are required to either pass &#x60;with_api_key&#x60; or &#x60;copy_settings[user]&#x60; in the request body as &#x60;true&#x60;. This ensures that your new Organization can either be accessed via the API or the Dashboard. 
     * @param organizationsCreateNewOrganizationRequest Organization details (required)
     * @return CreateNewOrganizationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The created organization </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewOrganizationRequestBuilder createNewOrganization(String name, URI website) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (website == null) throw new IllegalArgumentException("\"website\" is required but got null");
            

        return new CreateNewOrganizationRequestBuilder(name, website);
    }
    private okhttp3.Call getListCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getListCall(_callback);

    }


    private ApiResponse<OrganizationsGetListResponse> getListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getListValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<OrganizationsGetListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getListAsync(final ApiCallback<OrganizationsGetListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getListValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<OrganizationsGetListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetListRequestBuilder {

        private GetListRequestBuilder() {
        }

        /**
         * Build call for getList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of all organizations </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getListCall(_callback);
        }


        /**
         * Execute getList request
         * @return OrganizationsGetListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of all organizations </td><td>  -  </td></tr>
         </table>
         */
        public OrganizationsGetListResponse execute() throws ApiException {
            ApiResponse<OrganizationsGetListResponse> localVarResp = getListWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getList request with HTTP info returned
         * @return ApiResponse&lt;OrganizationsGetListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of all organizations </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OrganizationsGetListResponse> executeWithHttpInfo() throws ApiException {
            return getListWithHttpInfo();
        }

        /**
         * Execute getList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of all organizations </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OrganizationsGetListResponse> _callback) throws ApiException {
            return getListAsync(_callback);
        }
    }

    /**
     * List organizations
     * The returned list only includes the organization to which the API key belongs to, that is used for the request. 
     * @return GetListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all organizations </td><td>  -  </td></tr>
     </table>
     */
    public GetListRequestBuilder getList() throws IllegalArgumentException {
        return new GetListRequestBuilder();
    }
    private okhttp3.Call getOrganizationCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getOrganization(Async)");
        }

        return getOrganizationCall(id, _callback);

    }


    private ApiResponse<OrganizationsGetOrganizationResponse> getOrganizationWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<OrganizationsGetOrganizationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getOrganizationAsync(String id, final ApiCallback<OrganizationsGetOrganizationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<OrganizationsGetOrganizationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetOrganizationRequestBuilder {
        private final String id;

        private GetOrganizationRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for getOrganization
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An organization (to be overwritten in specific responses) </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOrganizationCall(id, _callback);
        }


        /**
         * Execute getOrganization request
         * @return OrganizationsGetOrganizationResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An organization (to be overwritten in specific responses) </td><td>  -  </td></tr>
         </table>
         */
        public OrganizationsGetOrganizationResponse execute() throws ApiException {
            ApiResponse<OrganizationsGetOrganizationResponse> localVarResp = getOrganizationWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getOrganization request with HTTP info returned
         * @return ApiResponse&lt;OrganizationsGetOrganizationResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An organization (to be overwritten in specific responses) </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OrganizationsGetOrganizationResponse> executeWithHttpInfo() throws ApiException {
            return getOrganizationWithHttpInfo(id);
        }

        /**
         * Execute getOrganization request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An organization (to be overwritten in specific responses) </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OrganizationsGetOrganizationResponse> _callback) throws ApiException {
            return getOrganizationAsync(id, _callback);
        }
    }

    /**
     * Retrieve organization
     * 
     * @param id ID of the organization to retrieve (required)
     * @return GetOrganizationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An organization (to be overwritten in specific responses) </td><td>  -  </td></tr>
     </table>
     */
    public GetOrganizationRequestBuilder getOrganization(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetOrganizationRequestBuilder(id);
    }
}
