/*
 * API Endpoints
 * Deliver monetary rewards and incentives to employees, customers, survey participants, and more through the Tremendous API. For organizational tasks, like managing your organization and it's members within Tremendous, please see the Tremendous Organizational API.
 *
 * The version of the OpenAPI document: 2
 * Contact: developers@tremendous.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.RewardsGenerateEmbedTokenResponse;
import com.konfigthis.client.model.RewardsGenerateLinkResponse;
import com.konfigthis.client.model.RewardsGetSingleRewardResponse;
import com.konfigthis.client.model.RewardsListAllRewardsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class RewardsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RewardsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public RewardsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call generateEmbedTokenCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rewards/{id}/generate_embed_token"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateEmbedTokenValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling generateEmbedToken(Async)");
        }

        return generateEmbedTokenCall(id, _callback);

    }


    private ApiResponse<RewardsGenerateEmbedTokenResponse> generateEmbedTokenWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = generateEmbedTokenValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<RewardsGenerateEmbedTokenResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call generateEmbedTokenAsync(String id, final ApiCallback<RewardsGenerateEmbedTokenResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateEmbedTokenValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<RewardsGenerateEmbedTokenResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GenerateEmbedTokenRequestBuilder {
        private final String id;

        private GenerateEmbedTokenRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for generateEmbedToken
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A redemption token for a reward </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return generateEmbedTokenCall(id, _callback);
        }


        /**
         * Execute generateEmbedToken request
         * @return RewardsGenerateEmbedTokenResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A redemption token for a reward </td><td>  -  </td></tr>
         </table>
         */
        public RewardsGenerateEmbedTokenResponse execute() throws ApiException {
            ApiResponse<RewardsGenerateEmbedTokenResponse> localVarResp = generateEmbedTokenWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute generateEmbedToken request with HTTP info returned
         * @return ApiResponse&lt;RewardsGenerateEmbedTokenResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A redemption token for a reward </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RewardsGenerateEmbedTokenResponse> executeWithHttpInfo() throws ApiException {
            return generateEmbedTokenWithHttpInfo(id);
        }

        /**
         * Execute generateEmbedToken request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A redemption token for a reward </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RewardsGenerateEmbedTokenResponse> _callback) throws ApiException {
            return generateEmbedTokenAsync(id, _callback);
        }
    }

    /**
     * Generate a reward token
     * Generate a temporary reward token identified by the &#x60;id&#x60; in the URL. These tokens are needed to render a reward when using [Tremendous Embed](https://github.com/tremendous-rewards/embed/blob/master/docs/documentation.md). The token is valid for 24 hours. 
     * @param id ID of the reward (required)
     * @return GenerateEmbedTokenRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A redemption token for a reward </td><td>  -  </td></tr>
     </table>
     */
    public GenerateEmbedTokenRequestBuilder generateEmbedToken(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GenerateEmbedTokenRequestBuilder(id);
    }
    private okhttp3.Call generateLinkCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rewards/{id}/generate_link"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateLinkValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling generateLink(Async)");
        }

        return generateLinkCall(id, _callback);

    }


    private ApiResponse<RewardsGenerateLinkResponse> generateLinkWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = generateLinkValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<RewardsGenerateLinkResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call generateLinkAsync(String id, final ApiCallback<RewardsGenerateLinkResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateLinkValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<RewardsGenerateLinkResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GenerateLinkRequestBuilder {
        private final String id;

        private GenerateLinkRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for generateLink
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A redemption link for a reward </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return generateLinkCall(id, _callback);
        }


        /**
         * Execute generateLink request
         * @return RewardsGenerateLinkResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A redemption link for a reward </td><td>  -  </td></tr>
         </table>
         */
        public RewardsGenerateLinkResponse execute() throws ApiException {
            ApiResponse<RewardsGenerateLinkResponse> localVarResp = generateLinkWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute generateLink request with HTTP info returned
         * @return ApiResponse&lt;RewardsGenerateLinkResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A redemption link for a reward </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RewardsGenerateLinkResponse> executeWithHttpInfo() throws ApiException {
            return generateLinkWithHttpInfo(id);
        }

        /**
         * Execute generateLink request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A redemption link for a reward </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RewardsGenerateLinkResponse> _callback) throws ApiException {
            return generateLinkAsync(id, _callback);
        }
    }

    /**
     * Generate a reward URL
     * Generate a redemption link for the reward identified by the &#x60;id&#x60; in the URL 
     * @param id ID of the reward (required)
     * @return GenerateLinkRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A redemption link for a reward </td><td>  -  </td></tr>
     </table>
     */
    public GenerateLinkRequestBuilder generateLink(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GenerateLinkRequestBuilder(id);
    }
    private okhttp3.Call getSingleRewardCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rewards/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSingleRewardValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSingleReward(Async)");
        }

        return getSingleRewardCall(id, _callback);

    }


    private ApiResponse<RewardsGetSingleRewardResponse> getSingleRewardWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getSingleRewardValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<RewardsGetSingleRewardResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSingleRewardAsync(String id, final ApiCallback<RewardsGetSingleRewardResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSingleRewardValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<RewardsGetSingleRewardResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSingleRewardRequestBuilder {
        private final String id;

        private GetSingleRewardRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for getSingleReward
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A reward (to be overwritten in specific reponses) </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSingleRewardCall(id, _callback);
        }


        /**
         * Execute getSingleReward request
         * @return RewardsGetSingleRewardResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A reward (to be overwritten in specific reponses) </td><td>  -  </td></tr>
         </table>
         */
        public RewardsGetSingleRewardResponse execute() throws ApiException {
            ApiResponse<RewardsGetSingleRewardResponse> localVarResp = getSingleRewardWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSingleReward request with HTTP info returned
         * @return ApiResponse&lt;RewardsGetSingleRewardResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A reward (to be overwritten in specific reponses) </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RewardsGetSingleRewardResponse> executeWithHttpInfo() throws ApiException {
            return getSingleRewardWithHttpInfo(id);
        }

        /**
         * Execute getSingleReward request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A reward (to be overwritten in specific reponses) </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RewardsGetSingleRewardResponse> _callback) throws ApiException {
            return getSingleRewardAsync(id, _callback);
        }
    }

    /**
     * Retrieve single reward
     * Retrieve the reward, identified by the given &#x60;id&#x60; in the URL 
     * @param id ID of the reward that should be retrieved (required)
     * @return GetSingleRewardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A reward (to be overwritten in specific reponses) </td><td>  -  </td></tr>
     </table>
     */
    public GetSingleRewardRequestBuilder getSingleReward(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetSingleRewardRequestBuilder(id);
    }
    private okhttp3.Call listAllRewardsCall(Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rewards";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllRewardsValidateBeforeCall(Integer offset, final ApiCallback _callback) throws ApiException {
        return listAllRewardsCall(offset, _callback);

    }


    private ApiResponse<RewardsListAllRewardsResponse> listAllRewardsWithHttpInfo(Integer offset) throws ApiException {
        okhttp3.Call localVarCall = listAllRewardsValidateBeforeCall(offset, null);
        Type localVarReturnType = new TypeToken<RewardsListAllRewardsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAllRewardsAsync(Integer offset, final ApiCallback<RewardsListAllRewardsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllRewardsValidateBeforeCall(offset, _callback);
        Type localVarReturnType = new TypeToken<RewardsListAllRewardsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAllRewardsRequestBuilder {
        private Integer offset;

        private ListAllRewardsRequestBuilder() {
        }

        /**
         * Set offset
         * @param offset Offsets the returned list by the given number of rewards. The returned rewards are ordered (and offsetted) by their creation date (DESC). (optional)
         * @return ListAllRewardsRequestBuilder
         */
        public ListAllRewardsRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for listAllRewards
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of existing rewards. Ordered by creation date (DESC). </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllRewardsCall(offset, _callback);
        }


        /**
         * Execute listAllRewards request
         * @return RewardsListAllRewardsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of existing rewards. Ordered by creation date (DESC). </td><td>  -  </td></tr>
         </table>
         */
        public RewardsListAllRewardsResponse execute() throws ApiException {
            ApiResponse<RewardsListAllRewardsResponse> localVarResp = listAllRewardsWithHttpInfo(offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAllRewards request with HTTP info returned
         * @return ApiResponse&lt;RewardsListAllRewardsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of existing rewards. Ordered by creation date (DESC). </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RewardsListAllRewardsResponse> executeWithHttpInfo() throws ApiException {
            return listAllRewardsWithHttpInfo(offset);
        }

        /**
         * Execute listAllRewards request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of existing rewards. Ordered by creation date (DESC). </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RewardsListAllRewardsResponse> _callback) throws ApiException {
            return listAllRewardsAsync(offset, _callback);
        }
    }

    /**
     * List rewards
     * Retrieve a list of all created rewards 
     * @return ListAllRewardsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of existing rewards. Ordered by creation date (DESC). </td><td>  -  </td></tr>
     </table>
     */
    public ListAllRewardsRequestBuilder listAllRewards() throws IllegalArgumentException {
        return new ListAllRewardsRequestBuilder();
    }
    private okhttp3.Call resendRewardByIdCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rewards/{id}/resend"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resendRewardByIdValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling resendRewardById(Async)");
        }

        return resendRewardByIdCall(id, _callback);

    }


    private ApiResponse<Object> resendRewardByIdWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = resendRewardByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call resendRewardByIdAsync(String id, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = resendRewardByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ResendRewardByIdRequestBuilder {
        private final String id;

        private ResendRewardByIdRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for resendRewardById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Reward will be resent. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return resendRewardByIdCall(id, _callback);
        }


        /**
         * Execute resendRewardById request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Reward will be resent. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = resendRewardByIdWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute resendRewardById request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Reward will be resent. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return resendRewardByIdWithHttpInfo(id);
        }

        /**
         * Execute resendRewardById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Reward will be resent. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return resendRewardByIdAsync(id, _callback);
        }
    }

    /**
     * Resend reward
     * Resends a reward, identified by the given &#x60;id&#x60; in the URL, to its recipient. 
     * @param id ID of the reward that should be resent (required)
     * @return ResendRewardByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Reward will be resent. </td><td>  -  </td></tr>
     </table>
     */
    public ResendRewardByIdRequestBuilder resendRewardById(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new ResendRewardByIdRequestBuilder(id);
    }
}
