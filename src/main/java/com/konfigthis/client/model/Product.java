/*
 * API Endpoints
 * Deliver monetary rewards and incentives to employees, customers, survey participants, and more through the Tremendous API. For organizational tasks, like managing your organization and it's members within Tremendous, please see the Tremendous Organizational API.
 *
 * The version of the OpenAPI document: 2
 * Contact: developers@tremendous.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ProductCountriesInner;
import com.konfigthis.client.model.ProductImagesInner;
import com.konfigthis.client.model.ProductSkusInner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * A product represents one way to payout a reward to it&#39;s recipient. Think:  * Amazon.com gift card (ID: &#x60;OKMHM2X2OHYV&#x60;) * Donations to Save the Children (ID: &#x60;ESRNAD533W5A&#x60;) * Virtual Visa debit card (ID: &#x60;Q24BD9EZ332JT&#x60;)  each of which is one specific product on Tremendous.  &gt; ðŸ“˜ All available products &gt; &gt; See this [list](https://www.tremendous.com/catalog)  Products can be limited in their availability to recipients by  * geography (field &#x60;countries&#x60;) * currency (field &#x60;currencies&#x60;) * amount of the reward (field &#x60;skus&#x60;)   * e.g. adidas gift cards accept any amount between 5 and 200 USD.  See the description of each respective parameter for further details. 
 */
@ApiModel(description = "A product represents one way to payout a reward to it's recipient. Think:  * Amazon.com gift card (ID: `OKMHM2X2OHYV`) * Donations to Save the Children (ID: `ESRNAD533W5A`) * Virtual Visa debit card (ID: `Q24BD9EZ332JT`)  each of which is one specific product on Tremendous.  > ðŸ“˜ All available products > > See this [list](https://www.tremendous.com/catalog)  Products can be limited in their availability to recipients by  * geography (field `countries`) * currency (field `currencies`) * amount of the reward (field `skus`)   * e.g. adidas gift cards accept any amount between 5 and 200 USD.  See the description of each respective parameter for further details. ")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Product {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * The category of this product  &lt;table&gt;   &lt;thead&gt;     &lt;tr&gt;       &lt;th&gt;Category&lt;/th&gt;       &lt;th&gt;Description&lt;/th&gt;     &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;     &lt;tr&gt;       &lt;td&gt;&lt;code&gt;ach&lt;/code&gt;&lt;/td&gt;       &lt;td&gt;Bank transfer to the recipient&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td&gt;&lt;code&gt;charity&lt;/code&gt;&lt;/td&gt;       &lt;td&gt;Donations to a charity&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td&gt;&lt;code&gt;merchant_card&lt;/code&gt;&lt;/td&gt;       &lt;td&gt;A gift card for a certain merchant (e.g. Amazon)&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td&gt;&lt;code&gt;paypal&lt;/code&gt;&lt;/td&gt;       &lt;td&gt;Payout via PayPal&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td&gt;&lt;code&gt;venmo&lt;/code&gt;&lt;/td&gt;       &lt;td&gt;Payout via Venmo&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td&gt;&lt;code&gt;visa_card&lt;/code&gt;&lt;/td&gt;       &lt;td&gt;Payout in form of a Visa debit card&lt;/td&gt;     &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt; 
   */
  @JsonAdapter(CategoryEnum.Adapter.class)
 public enum CategoryEnum {
    ACH("ach"),
    
    CHARITY("charity"),
    
    MERCHANT_CARD("merchant_card"),
    
    PAYPAL("paypal"),
    
    VENMO("venmo"),
    
    VISA_CARD("visa_card");

    private String value;

    CategoryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CategoryEnum fromValue(String value) {
      for (CategoryEnum b : CategoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CategoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CategoryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CategoryEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private CategoryEnum category;

  public static final String SERIALIZED_NAME_DISCLOSURE = "disclosure";
  @SerializedName(SERIALIZED_NAME_DISCLOSURE)
  private String disclosure;

  public static final String SERIALIZED_NAME_SKUS = "skus";
  @SerializedName(SERIALIZED_NAME_SKUS)
  private List<ProductSkusInner> skus = null;

  /**
   * Gets or Sets currencyCodes
   */
  @JsonAdapter(CurrencyCodesEnum.Adapter.class)
 public enum CurrencyCodesEnum {
    USD("USD"),
    
    CAD("CAD"),
    
    EUR("EUR"),
    
    AED("AED"),
    
    AFN("AFN"),
    
    ALL("ALL"),
    
    AMD("AMD"),
    
    ARS("ARS"),
    
    AUD("AUD"),
    
    AZN("AZN"),
    
    BAM("BAM"),
    
    BDT("BDT"),
    
    BGN("BGN"),
    
    BHD("BHD"),
    
    BIF("BIF"),
    
    BND("BND"),
    
    BOB("BOB"),
    
    BRL("BRL"),
    
    BWP("BWP"),
    
    BYR("BYR"),
    
    BZD("BZD"),
    
    CDF("CDF"),
    
    CHF("CHF"),
    
    CLP("CLP"),
    
    CNY("CNY"),
    
    COP("COP"),
    
    CRC("CRC"),
    
    CVE("CVE"),
    
    CZK("CZK"),
    
    DJF("DJF"),
    
    DKK("DKK"),
    
    DOP("DOP"),
    
    DZD("DZD"),
    
    EEK("EEK"),
    
    EGP("EGP"),
    
    ERN("ERN"),
    
    ETB("ETB"),
    
    GBP("GBP"),
    
    GEL("GEL"),
    
    GHS("GHS"),
    
    GNF("GNF"),
    
    GTQ("GTQ"),
    
    HKD("HKD"),
    
    HNL("HNL"),
    
    HRK("HRK"),
    
    HUF("HUF"),
    
    IDR("IDR"),
    
    ILS("ILS"),
    
    INR("INR"),
    
    IQD("IQD"),
    
    IRR("IRR"),
    
    ISK("ISK"),
    
    JMD("JMD"),
    
    JOD("JOD"),
    
    JPY("JPY"),
    
    KES("KES"),
    
    KHR("KHR"),
    
    KRW("KRW"),
    
    KWD("KWD"),
    
    KZT("KZT"),
    
    LBP("LBP"),
    
    LKR("LKR"),
    
    LTL("LTL"),
    
    LVL("LVL"),
    
    MAD("MAD"),
    
    MDL("MDL"),
    
    MGA("MGA"),
    
    MKD("MKD"),
    
    MMK("MMK"),
    
    MOP("MOP"),
    
    MUR("MUR"),
    
    MXN("MXN"),
    
    MYR("MYR"),
    
    MZN("MZN"),
    
    NAD("NAD"),
    
    NGN("NGN"),
    
    NIO("NIO"),
    
    NOK("NOK"),
    
    NPR("NPR"),
    
    NZD("NZD"),
    
    OMR("OMR"),
    
    PAB("PAB"),
    
    PEN("PEN"),
    
    PHP("PHP"),
    
    PKR("PKR"),
    
    PLN("PLN"),
    
    PYG("PYG"),
    
    QAR("QAR"),
    
    RON("RON"),
    
    RSD("RSD"),
    
    RUB("RUB"),
    
    RWF("RWF"),
    
    SAR("SAR"),
    
    SDG("SDG"),
    
    SEK("SEK"),
    
    SGD("SGD"),
    
    SOS("SOS"),
    
    SYP("SYP"),
    
    THB("THB"),
    
    TND("TND"),
    
    TOP("TOP"),
    
    TRY("TRY"),
    
    TTD("TTD"),
    
    TWD("TWD"),
    
    TZS("TZS"),
    
    UAH("UAH"),
    
    UGX("UGX"),
    
    UYU("UYU"),
    
    UZS("UZS"),
    
    VEF("VEF"),
    
    VND("VND"),
    
    XAF("XAF"),
    
    XOF("XOF"),
    
    YER("YER"),
    
    ZAR("ZAR"),
    
    ZMK("ZMK");

    private String value;

    CurrencyCodesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CurrencyCodesEnum fromValue(String value) {
      for (CurrencyCodesEnum b : CurrencyCodesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CurrencyCodesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CurrencyCodesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CurrencyCodesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CurrencyCodesEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CURRENCY_CODES = "currency_codes";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODES)
  private List<CurrencyCodesEnum> currencyCodes = new ArrayList<>();

  public static final String SERIALIZED_NAME_COUNTRIES = "countries";
  @SerializedName(SERIALIZED_NAME_COUNTRIES)
  private List<ProductCountriesInner> countries = new ArrayList<>();

  public static final String SERIALIZED_NAME_IMAGES = "images";
  @SerializedName(SERIALIZED_NAME_IMAGES)
  private List<ProductImagesInner> images = new ArrayList<>();

  public Product() {
  }

  
  public Product(
     String id
  ) {
    this();
    this.id = id;
  }

  public Product description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * Detailed description of the product. Mostly used for products with a &#x60;category&#x60; of &#x60;charities&#x60;.
   * @return description
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Detailed description of the product. Mostly used for products with a `category` of `charities`.")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "SOMEIDSOMEID", required = true, value = "")

  public String getId() {
    return id;
  }




  public Product name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Name of the product
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Name of the product")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public Product category(CategoryEnum category) {
    
    
    
    
    this.category = category;
    return this;
  }

   /**
   * The category of this product  &lt;table&gt;   &lt;thead&gt;     &lt;tr&gt;       &lt;th&gt;Category&lt;/th&gt;       &lt;th&gt;Description&lt;/th&gt;     &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;     &lt;tr&gt;       &lt;td&gt;&lt;code&gt;ach&lt;/code&gt;&lt;/td&gt;       &lt;td&gt;Bank transfer to the recipient&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td&gt;&lt;code&gt;charity&lt;/code&gt;&lt;/td&gt;       &lt;td&gt;Donations to a charity&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td&gt;&lt;code&gt;merchant_card&lt;/code&gt;&lt;/td&gt;       &lt;td&gt;A gift card for a certain merchant (e.g. Amazon)&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td&gt;&lt;code&gt;paypal&lt;/code&gt;&lt;/td&gt;       &lt;td&gt;Payout via PayPal&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td&gt;&lt;code&gt;venmo&lt;/code&gt;&lt;/td&gt;       &lt;td&gt;Payout via Venmo&lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td&gt;&lt;code&gt;visa_card&lt;/code&gt;&lt;/td&gt;       &lt;td&gt;Payout in form of a Visa debit card&lt;/td&gt;     &lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt; 
   * @return category
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "charities", required = true, value = "The category of this product  <table>   <thead>     <tr>       <th>Category</th>       <th>Description</th>     </tr>   </thead>   <tbody>     <tr>       <td><code>ach</code></td>       <td>Bank transfer to the recipient</td>     </tr>     <tr>       <td><code>charity</code></td>       <td>Donations to a charity</td>     </tr>     <tr>       <td><code>merchant_card</code></td>       <td>A gift card for a certain merchant (e.g. Amazon)</td>     </tr>     <tr>       <td><code>paypal</code></td>       <td>Payout via PayPal</td>     </tr>     <tr>       <td><code>venmo</code></td>       <td>Payout via Venmo</td>     </tr>     <tr>       <td><code>visa_card</code></td>       <td>Payout in form of a Visa debit card</td>     </tr>   </tbody> </table> ")

  public CategoryEnum getCategory() {
    return category;
  }


  public void setCategory(CategoryEnum category) {
    
    
    
    this.category = category;
  }


  public Product disclosure(String disclosure) {
    
    
    
    
    this.disclosure = disclosure;
    return this;
  }

   /**
   * Legal disclosures for this product. Can be in HTML format.
   * @return disclosure
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "<ul><li><p>This card may not be exchanged for cash.</p></li><li><p>â€¦</p></li></ul>", required = true, value = "Legal disclosures for this product. Can be in HTML format.")

  public String getDisclosure() {
    return disclosure;
  }


  public void setDisclosure(String disclosure) {
    
    
    
    this.disclosure = disclosure;
  }


  public Product skus(List<ProductSkusInner> skus) {
    
    
    
    
    this.skus = skus;
    return this;
  }

  public Product addSkusItem(ProductSkusInner skusItem) {
    if (this.skus == null) {
      this.skus = new ArrayList<>();
    }
    this.skus.add(skusItem);
    return this;
  }

   /**
   * Products may are restricted in their usage based on the amount of the reward. The &#x60;skus&#x60; array defines bands of denominations in which this product may be used for payouts. 
   * @return skus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Products may are restricted in their usage based on the amount of the reward. The `skus` array defines bands of denominations in which this product may be used for payouts. ")

  public List<ProductSkusInner> getSkus() {
    return skus;
  }


  public void setSkus(List<ProductSkusInner> skus) {
    
    
    
    this.skus = skus;
  }


  public Product currencyCodes(List<CurrencyCodesEnum> currencyCodes) {
    
    
    
    
    this.currencyCodes = currencyCodes;
    return this;
  }

  public Product addCurrencyCodesItem(CurrencyCodesEnum currencyCodesItem) {
    this.currencyCodes.add(currencyCodesItem);
    return this;
  }

   /**
   * Available currencies for this product
   * @return currencyCodes
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Available currencies for this product")

  public List<CurrencyCodesEnum> getCurrencyCodes() {
    return currencyCodes;
  }


  public void setCurrencyCodes(List<CurrencyCodesEnum> currencyCodes) {
    
    
    
    this.currencyCodes = currencyCodes;
  }


  public Product countries(List<ProductCountriesInner> countries) {
    
    
    
    
    this.countries = countries;
    return this;
  }

  public Product addCountriesItem(ProductCountriesInner countriesItem) {
    this.countries.add(countriesItem);
    return this;
  }

   /**
   * List of countries in which this product is available to recipients.
   * @return countries
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "[{\"abbr\":\"US\"}]", required = true, value = "List of countries in which this product is available to recipients.")

  public List<ProductCountriesInner> getCountries() {
    return countries;
  }


  public void setCountries(List<ProductCountriesInner> countries) {
    
    
    
    this.countries = countries;
  }


  public Product images(List<ProductImagesInner> images) {
    
    
    
    
    this.images = images;
    return this;
  }

  public Product addImagesItem(ProductImagesInner imagesItem) {
    this.images.add(imagesItem);
    return this;
  }

   /**
   * List of product images associated with this product (e.g. logos or images of the gift cards)
   * @return images
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "[{\"src\":\"https://example.com/some-logo.jpg\",\"type\":\"logo\"}]", required = true, value = "List of product images associated with this product (e.g. logos or images of the gift cards)")

  public List<ProductImagesInner> getImages() {
    return images;
  }


  public void setImages(List<ProductImagesInner> images) {
    
    
    
    this.images = images;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Product instance itself
   */
  public Product putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Product product = (Product) o;
    return Objects.equals(this.description, product.description) &&
        Objects.equals(this.id, product.id) &&
        Objects.equals(this.name, product.name) &&
        Objects.equals(this.category, product.category) &&
        Objects.equals(this.disclosure, product.disclosure) &&
        Objects.equals(this.skus, product.skus) &&
        Objects.equals(this.currencyCodes, product.currencyCodes) &&
        Objects.equals(this.countries, product.countries) &&
        Objects.equals(this.images, product.images)&&
        Objects.equals(this.additionalProperties, product.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, id, name, category, disclosure, skus, currencyCodes, countries, images, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Product {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    disclosure: ").append(toIndentedString(disclosure)).append("\n");
    sb.append("    skus: ").append(toIndentedString(skus)).append("\n");
    sb.append("    currencyCodes: ").append(toIndentedString(currencyCodes)).append("\n");
    sb.append("    countries: ").append(toIndentedString(countries)).append("\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("category");
    openapiFields.add("disclosure");
    openapiFields.add("skus");
    openapiFields.add("currency_codes");
    openapiFields.add("countries");
    openapiFields.add("images");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("category");
    openapiRequiredFields.add("disclosure");
    openapiRequiredFields.add("currency_codes");
    openapiRequiredFields.add("countries");
    openapiRequiredFields.add("images");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Product
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Product.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Product is not found in the empty JSON string", Product.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Product.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      if (!jsonObj.get("disclosure").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `disclosure` to be a primitive type in the JSON string but got `%s`", jsonObj.get("disclosure").toString()));
      }
      if (jsonObj.get("skus") != null && !jsonObj.get("skus").isJsonNull()) {
        JsonArray jsonArrayskus = jsonObj.getAsJsonArray("skus");
        if (jsonArrayskus != null) {
          // ensure the json data is an array
          if (!jsonObj.get("skus").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `skus` to be an array in the JSON string but got `%s`", jsonObj.get("skus").toString()));
          }

          // validate the optional field `skus` (array)
          for (int i = 0; i < jsonArrayskus.size(); i++) {
            ProductSkusInner.validateJsonObject(jsonArrayskus.get(i).getAsJsonObject());
          };
        }
      }
      // ensure the required json array is present
      if (jsonObj.get("currency_codes") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("currency_codes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency_codes` to be an array in the JSON string but got `%s`", jsonObj.get("currency_codes").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("countries").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `countries` to be an array in the JSON string but got `%s`", jsonObj.get("countries").toString()));
      }

      JsonArray jsonArraycountries = jsonObj.getAsJsonArray("countries");
      // validate the required field `countries` (array)
      for (int i = 0; i < jsonArraycountries.size(); i++) {
        ProductCountriesInner.validateJsonObject(jsonArraycountries.get(i).getAsJsonObject());
      };
      // ensure the json data is an array
      if (!jsonObj.get("images").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `images` to be an array in the JSON string but got `%s`", jsonObj.get("images").toString()));
      }

      JsonArray jsonArrayimages = jsonObj.getAsJsonArray("images");
      // validate the required field `images` (array)
      for (int i = 0; i < jsonArrayimages.size(); i++) {
        ProductImagesInner.validateJsonObject(jsonArrayimages.get(i).getAsJsonObject());
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Product.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Product' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Product> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Product.class));

       return (TypeAdapter<T>) new TypeAdapter<Product>() {
           @Override
           public void write(JsonWriter out, Product value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Product read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Product instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Product given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Product
  * @throws IOException if the JSON string is invalid with respect to Product
  */
  public static Product fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Product.class);
  }

 /**
  * Convert an instance of Product to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

