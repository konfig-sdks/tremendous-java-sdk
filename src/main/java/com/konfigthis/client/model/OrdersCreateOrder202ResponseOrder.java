/*
 * API Endpoints
 * Deliver monetary rewards and incentives to employees, customers, survey participants, and more through the Tremendous API. For organizational tasks, like managing your organization and it's members within Tremendous, please see the Tremendous Organizational API.
 *
 * The version of the OpenAPI document: 2
 * Contact: developers@tremendous.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.OrdersCreateOrder202ResponseOrderPayment;
import com.konfigthis.client.model.OrdersCreateOrder202ResponseOrderRewardsInner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * An order wraps around the fulfilment of one or more rewards.
 */
@ApiModel(description = "An order wraps around the fulfilment of one or more rewards.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class OrdersCreateOrder202ResponseOrder {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "external_id";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  private String externalId;

  public static final String SERIALIZED_NAME_CAMPAIGN_ID = "campaign_id";
  @SerializedName(SERIALIZED_NAME_CAMPAIGN_ID)
  private String campaignId;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  /**
   * Execution status of a given order  &lt;table&gt;   &lt;thead&gt;     &lt;tr&gt;       &lt;th&gt;         Status       &lt;/th&gt;       &lt;th&gt;         Description       &lt;/th&gt;     &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;     &lt;tr&gt;       &lt;td&gt;         &lt;code&gt;           CANCELED         &lt;/code&gt;       &lt;/td&gt;       &lt;td&gt;         The order and all of its rewards were canceled.       &lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td&gt;         &lt;code&gt;           CART         &lt;/code&gt;       &lt;/td&gt;       &lt;td&gt;         The order has been created, but hasn&#39;t yet been processed.       &lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td&gt;         &lt;code&gt;           EXECUTED         &lt;/code&gt;       &lt;/td&gt;       &lt;td&gt;         The order has been executed. Payment has been handled and rewards are being delivered (if applicable).       &lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td&gt;         &lt;code&gt;           FAILED         &lt;/code&gt;       &lt;/td&gt;       &lt;td&gt;         The order could not be processed due to an error. E.g. due to insufficient funds in the account.       &lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td&gt;         &lt;code&gt;           PENDING APPROVAL         &lt;/code&gt;       &lt;/td&gt;       &lt;td&gt;         The order has been created but needs approval to be executed.       &lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td&gt;         &lt;code&gt;           PENDING INTERNAL PAYMENT APPROVAL         &lt;/code&gt;       &lt;/td&gt;       &lt;td&gt;         The order has been created but it is under review and requires approval from our team.       &lt;/td&gt;     &lt;/tr&gt;    &lt;/tbody&gt; &lt;/table&gt; 
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    CANCELED("CANCELED"),
    
    CART("CART"),
    
    EXECUTED("EXECUTED"),
    
    FAILED("FAILED"),
    
    PENDING_APPROVAL("PENDING APPROVAL"),
    
    PENDING_INTERNAL_PAYMENT_APPROVAL("PENDING INTERNAL PAYMENT APPROVAL");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_PAYMENT = "payment";
  @SerializedName(SERIALIZED_NAME_PAYMENT)
  private OrdersCreateOrder202ResponseOrderPayment payment;

  public static final String SERIALIZED_NAME_INVOICE_ID = "invoice_id";
  @SerializedName(SERIALIZED_NAME_INVOICE_ID)
  private String invoiceId;

  public static final String SERIALIZED_NAME_REWARDS = "rewards";
  @SerializedName(SERIALIZED_NAME_REWARDS)
  private List<OrdersCreateOrder202ResponseOrderRewardsInner> rewards = null;

  public OrdersCreateOrder202ResponseOrder() {
  }

  public OrdersCreateOrder202ResponseOrder id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Tremendous ID of the order
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "SOMEIDSOMEID", required = true, value = "Tremendous ID of the order")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public OrdersCreateOrder202ResponseOrder externalId(String externalId) {
    
    
    
    
    this.externalId = externalId;
    return this;
  }

   /**
   * Reference for this order, supplied by the customer.  When set, &#x60;external_id&#x60; makes order idempotent. All requests that use the same &#x60;external_id&#x60; after the initial order creation, will result in a response that returns the data of the initially created order. The response will have a &#x60;201&#x60; response code. These responses **fail** to create any further orders.  It also allows for retrieving by &#x60;external_id&#x60; instead of &#x60;id&#x60; only. 
   * @return externalId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Your-Individual-Identifier-for-This-Order", value = "Reference for this order, supplied by the customer.  When set, `external_id` makes order idempotent. All requests that use the same `external_id` after the initial order creation, will result in a response that returns the data of the initially created order. The response will have a `201` response code. These responses **fail** to create any further orders.  It also allows for retrieving by `external_id` instead of `id` only. ")

  public String getExternalId() {
    return externalId;
  }


  public void setExternalId(String externalId) {
    
    
    
    this.externalId = externalId;
  }


  public OrdersCreateOrder202ResponseOrder campaignId(String campaignId) {
    
    
    
    
    this.campaignId = campaignId;
    return this;
  }

   /**
   * ID of the campaign in your account, that defines the available products (different gift cards, charity, etc.) that the recipient can choose from. 
   * @return campaignId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "IVM0I3WNJJL0", value = "ID of the campaign in your account, that defines the available products (different gift cards, charity, etc.) that the recipient can choose from. ")

  public String getCampaignId() {
    return campaignId;
  }


  public void setCampaignId(String campaignId) {
    
    
    
    this.campaignId = campaignId;
  }


  public OrdersCreateOrder202ResponseOrder createdAt(OffsetDateTime createdAt) {
    
    
    
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Date the order has been created
   * @return createdAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Date the order has been created")

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    
    
    
    this.createdAt = createdAt;
  }


  public OrdersCreateOrder202ResponseOrder status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Execution status of a given order  &lt;table&gt;   &lt;thead&gt;     &lt;tr&gt;       &lt;th&gt;         Status       &lt;/th&gt;       &lt;th&gt;         Description       &lt;/th&gt;     &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody&gt;     &lt;tr&gt;       &lt;td&gt;         &lt;code&gt;           CANCELED         &lt;/code&gt;       &lt;/td&gt;       &lt;td&gt;         The order and all of its rewards were canceled.       &lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td&gt;         &lt;code&gt;           CART         &lt;/code&gt;       &lt;/td&gt;       &lt;td&gt;         The order has been created, but hasn&#39;t yet been processed.       &lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td&gt;         &lt;code&gt;           EXECUTED         &lt;/code&gt;       &lt;/td&gt;       &lt;td&gt;         The order has been executed. Payment has been handled and rewards are being delivered (if applicable).       &lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td&gt;         &lt;code&gt;           FAILED         &lt;/code&gt;       &lt;/td&gt;       &lt;td&gt;         The order could not be processed due to an error. E.g. due to insufficient funds in the account.       &lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td&gt;         &lt;code&gt;           PENDING APPROVAL         &lt;/code&gt;       &lt;/td&gt;       &lt;td&gt;         The order has been created but needs approval to be executed.       &lt;/td&gt;     &lt;/tr&gt;     &lt;tr&gt;       &lt;td&gt;         &lt;code&gt;           PENDING INTERNAL PAYMENT APPROVAL         &lt;/code&gt;       &lt;/td&gt;       &lt;td&gt;         The order has been created but it is under review and requires approval from our team.       &lt;/td&gt;     &lt;/tr&gt;    &lt;/tbody&gt; &lt;/table&gt; 
   * @return status
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Execution status of a given order  <table>   <thead>     <tr>       <th>         Status       </th>       <th>         Description       </th>     </tr>   </thead>   <tbody>     <tr>       <td>         <code>           CANCELED         </code>       </td>       <td>         The order and all of its rewards were canceled.       </td>     </tr>     <tr>       <td>         <code>           CART         </code>       </td>       <td>         The order has been created, but hasn't yet been processed.       </td>     </tr>     <tr>       <td>         <code>           EXECUTED         </code>       </td>       <td>         The order has been executed. Payment has been handled and rewards are being delivered (if applicable).       </td>     </tr>     <tr>       <td>         <code>           FAILED         </code>       </td>       <td>         The order could not be processed due to an error. E.g. due to insufficient funds in the account.       </td>     </tr>     <tr>       <td>         <code>           PENDING APPROVAL         </code>       </td>       <td>         The order has been created but needs approval to be executed.       </td>     </tr>     <tr>       <td>         <code>           PENDING INTERNAL PAYMENT APPROVAL         </code>       </td>       <td>         The order has been created but it is under review and requires approval from our team.       </td>     </tr>    </tbody> </table> ")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }


  public OrdersCreateOrder202ResponseOrder payment(OrdersCreateOrder202ResponseOrderPayment payment) {
    
    
    
    
    this.payment = payment;
    return this;
  }

   /**
   * Get payment
   * @return payment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OrdersCreateOrder202ResponseOrderPayment getPayment() {
    return payment;
  }


  public void setPayment(OrdersCreateOrder202ResponseOrderPayment payment) {
    
    
    
    this.payment = payment;
  }


  public OrdersCreateOrder202ResponseOrder invoiceId(String invoiceId) {
    
    
    
    
    this.invoiceId = invoiceId;
    return this;
  }

   /**
   * The ID for the invoice associated with this order
   * @return invoiceId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2E59A82B-0001", value = "The ID for the invoice associated with this order")

  public String getInvoiceId() {
    return invoiceId;
  }


  public void setInvoiceId(String invoiceId) {
    
    
    
    this.invoiceId = invoiceId;
  }


  public OrdersCreateOrder202ResponseOrder rewards(List<OrdersCreateOrder202ResponseOrderRewardsInner> rewards) {
    
    
    
    
    this.rewards = rewards;
    return this;
  }

  public OrdersCreateOrder202ResponseOrder addRewardsItem(OrdersCreateOrder202ResponseOrderRewardsInner rewardsItem) {
    if (this.rewards == null) {
      this.rewards = new ArrayList<>();
    }
    this.rewards.add(rewardsItem);
    return this;
  }

   /**
   * Get rewards
   * @return rewards
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<OrdersCreateOrder202ResponseOrderRewardsInner> getRewards() {
    return rewards;
  }


  public void setRewards(List<OrdersCreateOrder202ResponseOrderRewardsInner> rewards) {
    
    
    
    this.rewards = rewards;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the OrdersCreateOrder202ResponseOrder instance itself
   */
  public OrdersCreateOrder202ResponseOrder putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrdersCreateOrder202ResponseOrder ordersCreateOrder202ResponseOrder = (OrdersCreateOrder202ResponseOrder) o;
    return Objects.equals(this.id, ordersCreateOrder202ResponseOrder.id) &&
        Objects.equals(this.externalId, ordersCreateOrder202ResponseOrder.externalId) &&
        Objects.equals(this.campaignId, ordersCreateOrder202ResponseOrder.campaignId) &&
        Objects.equals(this.createdAt, ordersCreateOrder202ResponseOrder.createdAt) &&
        Objects.equals(this.status, ordersCreateOrder202ResponseOrder.status) &&
        Objects.equals(this.payment, ordersCreateOrder202ResponseOrder.payment) &&
        Objects.equals(this.invoiceId, ordersCreateOrder202ResponseOrder.invoiceId) &&
        Objects.equals(this.rewards, ordersCreateOrder202ResponseOrder.rewards)&&
        Objects.equals(this.additionalProperties, ordersCreateOrder202ResponseOrder.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, externalId, campaignId, createdAt, status, payment, invoiceId, rewards, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrdersCreateOrder202ResponseOrder {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    campaignId: ").append(toIndentedString(campaignId)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    payment: ").append(toIndentedString(payment)).append("\n");
    sb.append("    invoiceId: ").append(toIndentedString(invoiceId)).append("\n");
    sb.append("    rewards: ").append(toIndentedString(rewards)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("external_id");
    openapiFields.add("campaign_id");
    openapiFields.add("created_at");
    openapiFields.add("status");
    openapiFields.add("payment");
    openapiFields.add("invoice_id");
    openapiFields.add("rewards");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("status");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to OrdersCreateOrder202ResponseOrder
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!OrdersCreateOrder202ResponseOrder.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrdersCreateOrder202ResponseOrder is not found in the empty JSON string", OrdersCreateOrder202ResponseOrder.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OrdersCreateOrder202ResponseOrder.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("external_id").isJsonNull() && (jsonObj.get("external_id") != null && !jsonObj.get("external_id").isJsonNull()) && !jsonObj.get("external_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_id").toString()));
      }
      if (!jsonObj.get("campaign_id").isJsonNull() && (jsonObj.get("campaign_id") != null && !jsonObj.get("campaign_id").isJsonNull()) && !jsonObj.get("campaign_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `campaign_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("campaign_id").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `payment`
      if (jsonObj.get("payment") != null && !jsonObj.get("payment").isJsonNull()) {
        OrdersCreateOrder202ResponseOrderPayment.validateJsonObject(jsonObj.getAsJsonObject("payment"));
      }
      if ((jsonObj.get("invoice_id") != null && !jsonObj.get("invoice_id").isJsonNull()) && !jsonObj.get("invoice_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoice_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoice_id").toString()));
      }
      if (jsonObj.get("rewards") != null && !jsonObj.get("rewards").isJsonNull()) {
        JsonArray jsonArrayrewards = jsonObj.getAsJsonArray("rewards");
        if (jsonArrayrewards != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rewards").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rewards` to be an array in the JSON string but got `%s`", jsonObj.get("rewards").toString()));
          }

          // validate the optional field `rewards` (array)
          for (int i = 0; i < jsonArrayrewards.size(); i++) {
            OrdersCreateOrder202ResponseOrderRewardsInner.validateJsonObject(jsonArrayrewards.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrdersCreateOrder202ResponseOrder.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrdersCreateOrder202ResponseOrder' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrdersCreateOrder202ResponseOrder> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrdersCreateOrder202ResponseOrder.class));

       return (TypeAdapter<T>) new TypeAdapter<OrdersCreateOrder202ResponseOrder>() {
           @Override
           public void write(JsonWriter out, OrdersCreateOrder202ResponseOrder value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public OrdersCreateOrder202ResponseOrder read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             OrdersCreateOrder202ResponseOrder instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OrdersCreateOrder202ResponseOrder given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OrdersCreateOrder202ResponseOrder
  * @throws IOException if the JSON string is invalid with respect to OrdersCreateOrder202ResponseOrder
  */
  public static OrdersCreateOrder202ResponseOrder fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrdersCreateOrder202ResponseOrder.class);
  }

 /**
  * Convert an instance of OrdersCreateOrder202ResponseOrder to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

