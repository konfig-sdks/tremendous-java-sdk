/*
 * API Endpoints
 * Deliver monetary rewards and incentives to employees, customers, survey participants, and more through the Tremendous API. For organizational tasks, like managing your organization and it's members within Tremendous, please see the Tremendous Organizational API.
 *
 * The version of the OpenAPI document: 2
 * Contact: developers@tremendous.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import java.io.File;
import com.konfigthis.client.model.InvoicesCreateAndFundAccountBalanceRequest;
import com.konfigthis.client.model.InvoicesCreateAndFundAccountBalanceResponse;
import com.konfigthis.client.model.InvoicesGetAllResponse;
import com.konfigthis.client.model.InvoicesGetByIdResponse;
import com.konfigthis.client.model.InvoicesRemoveInvoiceResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for InvoicesApi
 */
@Disabled
public class InvoicesApiTest {

    private static InvoicesApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new InvoicesApi(apiClient);
    }

    /**
     * Create invoice
     *
     * Creating an invoice is the way for your organization to fund your account&#39;s balance.  1. Create an invoice 2. Pay the invoice 3. Funds get added to your account&#39;s balance  ## Request body  &lt;div class&#x3D;\&quot;object-schema-request-schema\&quot;&gt;   &lt;table&gt;   &lt;thead&gt;     &lt;tr&gt;       &lt;th&gt;Property&lt;/th&gt;       &lt;th&gt;Type&lt;/th&gt;       &lt;th&gt;Description&lt;/th&gt;     &lt;/tr&gt;   &lt;/thead&gt;   &lt;tbody class&#x3D;\&quot;object-schema-table-body\&quot;&gt;     &lt;tr class&#x3D;\&quot;\&quot;&gt;&lt;td&gt;&lt;div class&#x3D;\&quot;property-name\&quot;&gt;   &lt;code class&#x3D;\&quot;property-name\&quot;&gt;po_number&lt;/code&gt; &lt;/div&gt; &lt;/td&gt;&lt;td&gt;&lt;span class&#x3D;\&quot;property-type\&quot;&gt;string&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;Reference to the purchase order number within your organization&lt;/p&gt; &lt;/td&gt;&lt;/tr&gt; &lt;tr class&#x3D;\&quot;\&quot;&gt;&lt;td&gt;&lt;div class&#x3D;\&quot;property-name\&quot;&gt;   &lt;code class&#x3D;\&quot;property-name\&quot;&gt;amount&lt;/code&gt; &lt;/div&gt; &lt;/td&gt;&lt;td&gt;&lt;span class&#x3D;\&quot;property-type\&quot;&gt;number&lt;/span&gt; &lt;span class&#x3D;\&quot;property-format\&quot;&gt;double&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;Amount of the invoice in USD&lt;/p&gt; &lt;/td&gt;&lt;/tr&gt; &lt;tr class&#x3D;\&quot;\&quot;&gt;&lt;td&gt;&lt;div class&#x3D;\&quot;property-name\&quot;&gt;   &lt;code class&#x3D;\&quot;property-name\&quot;&gt;memo&lt;/code&gt; &lt;/div&gt; &lt;/td&gt;&lt;td&gt;&lt;span class&#x3D;\&quot;property-type\&quot;&gt;string&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;A note to be included in the invoice. This is for your internal use and will not be visible to the recipient.&lt;/p&gt; &lt;/td&gt;&lt;/tr&gt;   &lt;/tbody&gt; &lt;/table&gt;  &lt;/div&gt;  
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAndFundAccountBalanceTest() throws ApiException {
        Double amount = null;
        String poNumber = null;
        String memo = null;
        InvoicesCreateAndFundAccountBalanceResponse response = api.createAndFundAccountBalance(amount)
                .poNumber(poNumber)
                .memo(memo)
                .execute();
        // TODO: test validations
    }

    /**
     * List invoices
     *
     * Fetch a list of all invoices on your account.  &gt; ðŸš§ Deleted invoices are omitted &gt; &gt; The response does not include any previously deleted invoices. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllTest() throws ApiException {
        Integer offset = null;
        Integer limit = null;
        InvoicesGetAllResponse response = api.getAll()
                .offset(offset)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve invoice
     *
     * Retrieve an invoice, identified by the given &#x60;id&#x60; in the URL  &gt; ðŸ“˜ Deleted Invoices &gt; &gt; This endpoint can be used to retrieve details on deleted invoices &gt; that the list of invoices omits. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        String id = null;
        InvoicesGetByIdResponse response = api.getById(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve invoice as CSV
     *
     * Generates a CSV version for an invoice listing the associated rewards and orders 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCsvTest() throws ApiException {
        String id = null;
        String response = api.getCsv(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve invoice as PDF
     *
     * Generates a PDF version for an invoice 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPdfTest() throws ApiException {
        String id = null;
        File response = api.getPdf(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete invoice
     *
     * Removes an invoice. This has no further consequences but is a rather cosmetic operation. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeInvoiceTest() throws ApiException {
        String id = null;
        InvoicesRemoveInvoiceResponse response = api.removeInvoice(id)
                .execute();
        // TODO: test validations
    }

}
