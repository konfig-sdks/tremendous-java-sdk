/*
 * API Endpoints
 * Deliver monetary rewards and incentives to employees, customers, survey participants, and more through the Tremendous API. For organizational tasks, like managing your organization and it's members within Tremendous, please see the Tremendous Organizational API.
 *
 * The version of the OpenAPI document: 2
 * Contact: developers@tremendous.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.RewardsGenerateEmbedTokenResponse;
import com.konfigthis.client.model.RewardsGenerateLinkResponse;
import com.konfigthis.client.model.RewardsGetSingleRewardResponse;
import com.konfigthis.client.model.RewardsListAllRewardsResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RewardsApi
 */
@Disabled
public class RewardsApiTest {

    private static RewardsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new RewardsApi(apiClient);
    }

    /**
     * Generate a reward token
     *
     * Generate a temporary reward token identified by the &#x60;id&#x60; in the URL. These tokens are needed to render a reward when using [Tremendous Embed](https://github.com/tremendous-rewards/embed/blob/master/docs/documentation.md). The token is valid for 24 hours. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void generateEmbedTokenTest() throws ApiException {
        String id = null;
        RewardsGenerateEmbedTokenResponse response = api.generateEmbedToken(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Generate a reward URL
     *
     * Generate a redemption link for the reward identified by the &#x60;id&#x60; in the URL 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void generateLinkTest() throws ApiException {
        String id = null;
        RewardsGenerateLinkResponse response = api.generateLink(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve single reward
     *
     * Retrieve the reward, identified by the given &#x60;id&#x60; in the URL 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSingleRewardTest() throws ApiException {
        String id = null;
        RewardsGetSingleRewardResponse response = api.getSingleReward(id)
                .execute();
        // TODO: test validations
    }

    /**
     * List rewards
     *
     * Retrieve a list of all created rewards 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAllRewardsTest() throws ApiException {
        Integer offset = null;
        RewardsListAllRewardsResponse response = api.listAllRewards()
                .offset(offset)
                .execute();
        // TODO: test validations
    }

    /**
     * Resend reward
     *
     * Resends a reward, identified by the given &#x60;id&#x60; in the URL, to its recipient. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resendRewardByIdTest() throws ApiException {
        String id = null;
        Object response = api.resendRewardById(id)
                .execute();
        // TODO: test validations
    }

}
